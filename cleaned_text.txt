ds 4300 large scale information storage retrieval mark fontenot phd northeastern university
hi 󰗞 ●mark fontenot phd ○ofﬁce 353 meserve hall ○ofﬁce hours ■m th 130 300 pm times don’t work dm slack set alternate time ○usually available slack… dm ●mfontenotnortheasternedu 2
teaching assistants 3 iker acosta venegas dallon archibald nathan cheung aryan jain abhishek kumar eddy liu sevinch noori junxiang lin
ﬁnd … ● course materials notes assignments etc httpsmarkfontenotnetteachingds430025sds4300 ● assignment submissions grades gradescope ●q platform campuswire ●quick dms announcements slack 4
what’s class ●by end class ○ understand efﬁciencyrelated concepts including limitations rdbmss ○ understand data replication distribution effects typical db usage scenarios ○ understand use cases data models various nosql database systems including storing retrieving data data models include documentbased keyvalue stores graph based among others ○ access implement data engineering bigdatarelated aws services 5
course deliverables evaluation 6
assignments ●homeworks practicals ○usually due tuesday nights 1159 unless otherwise stated ○3 bonus submitting 48 hours early no… can’t get 3 submitting 48 hours early ○no late submissions accepted ■ but… life happens… everyone gets 1 free noquestionsasked 48 hour extension ■ dm dr fontenot slack sometime original deadline requesting use extension 7
assignments ●submissions via gradescope andor github unless directed otherwise ○only submit pdfs unless otherwise instructed ○if submitting pdf sure associate questions gradescope correct page pdf ■failure may result grade 0 assignment ●all regrade requests must submitted within 48 hours grades released gradescope exceptions 8
midterm monday march 17 mark calendars 9
final grade breakdown ●homeworks 5 30 ●practicals 2 20 ●midterm 20 ●semester project 30 10
reference materials primary resources 11 o’reilly playlist books playlist add additional materials playlist webpage semester progresses
tentative list topics ●thinking data storage retrieval data structures level ●how far get relational model ●nosql databases ○ document databases mongo ○ graph databases neo4j ○ keyvalue databases ○ maybe vector databases ●data distribution replication ●distributed sql dbs apache sparksparksql ●big data ools services aws 12
tools need install laptop ●docker desktop ●anaconda miniconda python ○you’re welcome use another distro you’re responsible ﬁxing something doesn’t work dependency conﬂicts etc ●a database access tool like datagrip dbeaver ●vs code set python development ○see info vscode python anaconda ●ability interact git github terminal gui app 13
topics review next days shellcmd promptpowershell cli windows want unix terminal wsl2 zsh windows navigating ﬁle system running commands like pip conda python etc command line args docker docker compose basics dockerﬁles dockercomposeyaml ﬁles port mapping setting volumes mapping host guest os 14
python rusty haven’t done ton python crash course net ninja yt o’reilly see python section class playlist python objectoriented programming video course simon sez e matthes python crash course 3rd edition starch press related yt video playlist listed 15
expectations ●conduct respectfully ●don’t distract classmates learning ●don’t cheat ○do work unless group assignment ○discussing problems encouraged must formulate solutions ○see syllabus details 16
let’s gooo 17
ds 4300 moving beyond relational model mark fontenot phd northeastern university
beneﬁts relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience 2
relational database performance many ways rdbms increases efﬁciency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning 3
transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simpliﬁed error handling 4
acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints 5
acid properties isolation two transactions t1 t2 executed time cannot affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads 6
isolation dirty read 7 figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modiﬁed another transaction t2 hasn’t yet executed commit
isolation nonrepeatable read 8 figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed
isolation phantom reads 9 figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using
example transaction transfer 10 delimiter create procedure transfer senderid int receiverid int amount decimal102 begin declare rollbackmessage varchar255 default transaction rolled back insufficient funds declare commitmessage varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount accountid senderid attempt credit money account 2 update accounts set balance balance amount accountid receiverid continued next slide
example transaction transfer 11 continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts accountid senderid 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set messagetext rollbackmessage else log transactions sufficient funds insert transactions accountid amount transactiontype values senderid amount withdrawal insert transactions accountid amount transactiontype values receiverid amount deposit commit transaction commit select commitmessage result end end delimiter
acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 12
… relational databases may solution problems… sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems 13
scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical ﬁnancial limits however modern systems make horizontal scaling less problematic 14
distributed data scaling distributed system “a collection independent computers appear users one computer ” andrew ennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock 15
distributed storage 2 directions 16 single main node
distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition olerant system keep running even w network partition 17
cap theorem 18
cap theorem 19 cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition olerance system continue operate despite arbitrary network issues
cap theorem database view 20 reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition olerance database maintain operations event network’s failing two segments distributed system note definition consistency cap different acid
cap theorem database view 21 reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition olerance system responds data distributed store always latest else data request dropped availability partition olerance system always sends responds based distributed store may absolute latest data
cap reality really saying cannot limit number faults requests directed server insist serving every request cannot possibly consistent interpreted must always give something consistency availability tolerance failure 22
23